{"ast":null,"code":"import { Cookie } from 'ng2-cookies';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class Foo {\n  id;\n  name;\n  constructor(id, name) {\n    this.id = id;\n    this.name = name;\n  }\n}\nexport let AppService = /*#__PURE__*/(() => {\n  class AppService {\n    _http;\n    router;\n    constructor(_http, router) {\n      this._http = _http;\n      this.router = router;\n    }\n    retrieveToken() {\n      let headers = new HttpHeaders({\n        'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'\n      });\n      this._http.post('auth/token', {}, {\n        headers: headers\n      }).subscribe(data => this.saveToken(data), err => alert('Invalid Credentials'));\n    }\n    saveToken(token) {\n      var expireDate = new Date().getTime() + 1000 * token.expires_in;\n      Cookie.set(\"access_token\", token.access_token, expireDate);\n      console.log('Obtained Access token');\n      this.router.navigate(['/']);\n    }\n    getResource(resourceUrl) {\n      var headers = new HttpHeaders({\n        'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\n        'Authorization': 'Bearer ' + Cookie.get('access_token')\n      });\n      return this._http.get(resourceUrl, {\n        headers: headers\n      }).catch(error => Observable.throw(error.json().error || 'Server error'));\n    }\n    checkCredentials() {\n      return Cookie.check('access_token');\n    }\n    logout() {\n      let headers = new HttpHeaders({\n        'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'\n      });\n      this._http.post('auth/refresh/revoke', {}, {\n        headers: headers\n      }).subscribe(data => {\n        Cookie.delete('access_token');\n        window.location.href = 'http://localhost:8089/';\n      }, err => alert('Could not logout'));\n    }\n    refreshAccessToken() {\n      let headers = new HttpHeaders({\n        'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'\n      });\n      this._http.post('auth/refresh', {}, {\n        headers: headers\n      }).subscribe(data => this.saveToken(data), err => alert('Invalid Credentials'));\n    }\n    static ɵfac = function AppService_Factory(t) {\n      return new (t || AppService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AppService,\n      factory: AppService.ɵfac\n    });\n  }\n  return AppService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}