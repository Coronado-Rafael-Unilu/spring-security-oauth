{"ast":null,"code":"import _defineProperty from \"C:/Users/rafa/Documents/GitHub/spring-security-oauth/oauth-rest/oauth-ui-authorization-code-angular/src/main/resources/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Cookie } from 'ng2-cookies';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class Foo {\n  constructor(id, name) {\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"name\", void 0);\n    this.id = id;\n    this.name = name;\n  }\n}\nexport let AppService = /*#__PURE__*/(() => {\n  var _AppService;\n  class AppService {\n    constructor(_http) {\n      _defineProperty(this, \"_http\", void 0);\n      _defineProperty(this, \"clientId\", 'newClient');\n      _defineProperty(this, \"redirectUri\", 'http://localhost:8089/');\n      this._http = _http;\n    }\n    retrieveToken(code) {\n      let params = new URLSearchParams();\n      params.append('grant_type', 'authorization_code');\n      params.append('client_id', this.clientId);\n      params.append('redirect_uri', this.redirectUri);\n      params.append('code', code);\n      let headers = new HttpHeaders({\n        'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'\n      });\n      this._http.post('http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/token', params.toString(), {\n        headers: headers\n      }).subscribe(data => this.saveToken(data), err => alert('Invalid Credentials'));\n    }\n    saveToken(token) {\n      var expireDate = new Date().getTime() + 1000 * token.expires_in;\n      Cookie.set(\"access_token\", token.access_token, expireDate);\n      Cookie.set(\"id_token\", token.id_token, expireDate);\n      console.log('Obtained Access token');\n      window.location.href = 'http://localhost:8089';\n    }\n    getResource(resourceUrl) {\n      var headers = new HttpHeaders({\n        'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\n        'Authorization': 'Bearer ' + Cookie.get('access_token')\n      });\n      return this._http.get(resourceUrl, {\n        headers: headers\n      }).catch(error => Observable.throw(error.json().error || 'Server error'));\n    }\n    checkCredentials() {\n      return Cookie.check('access_token');\n    }\n    logout() {\n      let token = Cookie.get('id_token');\n      Cookie.delete('access_token');\n      Cookie.delete('id_token');\n      let logoutURL = \"http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/logout?id_token_hint=\" + token + \"&post_logout_redirect_uri=\" + this.redirectUri;\n      window.location.href = logoutURL;\n    }\n  }\n  _AppService = AppService;\n  _defineProperty(AppService, \"\\u0275fac\", function AppService_Factory(t) {\n    return new (t || _AppService)(i0.ɵɵinject(i1.HttpClient));\n  });\n  _defineProperty(AppService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _AppService,\n    factory: _AppService.ɵfac\n  }));\n  return AppService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}